<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tipo = m_bot_nn;
sobre = false;
depth = -room_height;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sobre = point_distance(mouse_x, mouse_y, x, y) &lt; 16;
if sobre {
    if mouse_check_button_pressed(mb_left) {
        var lapiz = true;
        var snd = true;
        switch tipo {
            case m_bot_mapa:
                var fff = get_open_filename("IMAGE|*.png", "");
                if fff != "" {
                    file_copy(fff, "tmp.png");
                }
                else if file_exists("tmp.png") {
                    file_delete("tmp.png");
                }
                break;
            case m_bot_chat:
                if war_dialogos == m_chat_null {
                    war_dialogos = m_chat_all;
                }
                else {
                    war_dialogos = m_chat_null;
                }
                break;
            case m_bot_foto:
                if s_foto() {
                    snd = false;
                    audio_play_sound(a_camara, 100, false);
                }
                break;
            case m_bot_zona:
                lapiz = false;
                o_control.boton_foco = m_foco_zona;
                break;
            case m_bot_name:
                lapiz = false;
                o_control.boton_foco = m_foco_name;
                break;
            case m_bot_play:
                if o_control.alarm[0] == -1 {
                    war_dialogos = m_chat_null;
                    room_goto(w_mundo);
                }
                break;
            case m_bot_busca:
                s_data_busqueda(3);
                break;
            case m_bot_mucho:
                o_control.war_inicial = min(o_control.war_inicial + m_jump_porcent, 1);
                break;
            case m_bot_poco:
                o_control.war_inicial = max(o_control.war_inicial - m_jump_porcent, 0);
                break;
            case m_bot_mas:
                war_max = min(war_max + m_jump_total, m_jump_total * 25);
                break;
            case m_bot_menos:
                war_max = max(war_max - m_jump_total, m_jump_total);
                break;
            case m_bot_fight:
                war_pelea++;
                if war_pelea &gt; m_pelea_azar {
                    war_pelea = m_pelea_all;
                }
                break;
            case m_bot_fuego:
                o_control.war_gen[4] = !o_control.war_gen[4];
                s_data_total();
                s_data_busqueda(4);
                break;
            case m_bot_aire:
                o_control.war_gen[3] = !o_control.war_gen[3];
                s_data_total();
                s_data_busqueda(4);
                break;
            case m_bot_agua:
                o_control.war_gen[2] = !o_control.war_gen[2];
                s_data_total();
                s_data_busqueda(4);
                break;
            case m_bot_tierra:
                o_control.war_gen[1] = !o_control.war_gen[1];
                s_data_total();
                s_data_busqueda(4);
                break;
            case m_bot_neutral:
                o_control.war_gen[0] = !o_control.war_gen[0];
                if o_control.war_gen[0] {
                    with o_avatar {
                        s_zombi_ini(x, y);
                        instance_destroy();
                        break;
                    }
                }
                break;
            case m_bot_azar:
                s_data_busqueda(2);
                break;
            case m_bot_time:
                if o_control.reloj_menu == -1 {
                    o_control.reloj_menu = 0;
                }
                else {
                    o_control.reloj_menu = -1;
                }
                break;
            case m_bot_next:
                s_data_busqueda(1);
                break;
            case m_bot_previous:
                s_data_busqueda(0);
                break;
            case m_bot_forms:
                execute_shell_simple(m_http_link);
                break;
            default:
                snd = false;
                break;
        }
        if lapiz {
            o_control.boton_foco = m_foco_null;
        }
        if snd {
            var s = audio_play_sound(a_action, 100, false);
            audio_sound_gain(s, 0.5, 0);
        }
    }
    else {
        switch tipo {
            case m_bot_chat:
                o_control.boton_txt = "Mostrar u ocultar lo que tenga para decir el avatar";
                break;
            case m_bot_zona:
                o_control.boton_txt = "Escribir nombre de zona, ej: letras del mapa. Deje vacío para universal";
                break;
            case m_bot_name:
                o_control.boton_txt = "Escribir nombre del avatar a buscar";
                break;
            case m_bot_play:
                o_control.boton_txt = "Play, comienza la simulación!!!";
                break;
            case m_bot_busca:
                o_control.boton_txt = "Busca al avatar con el nombre escrito, No filtrará según zona o grupo";
                break;
            case m_bot_mucho:
                o_control.boton_txt = "Aumentar porcentaje de avatares al inicio";
                break;
            case m_bot_poco:
                o_control.boton_txt = "Disminuir porcentaje de avatares al inicio";
                break;
            case m_bot_mas:
                o_control.boton_txt = "Aumentar límite máximo de avatares por grupo";
                break;
            case m_bot_menos:
                o_control.boton_txt = "Disminuir límite máximo de avatares por grupo";
                break;
            case m_bot_mapa:
                o_control.boton_txt = "Importar imagen PNG que hará de mapa del mundo";
                break;
            case m_bot_fight:
                switch war_pelea {
                    case m_pelea_paz:
                        o_control.boton_txt = "Paz, no hay conflicto, modo para observar";
                        break;
                    case m_pelea_zombi:
                        o_control.boton_txt = "Tierra, Agua, Aire, Fuego aliados contra los Muertos";
                        break;
                    case m_pelea_grupos:
                        o_control.boton_txt = "Clásica batalla entre grupos, modo recomendado";
                        break;
                    case m_pelea_all:
                        o_control.boton_txt = "Sin grupos, todos contra todos";
                        break;
                    case m_pelea_dual:
                        o_control.boton_txt = "Batalla entre grupos, alianza Tierra-Agua y Aire-Fuego";
                        break;
                    case m_pelea_cruz:
                        o_control.boton_txt = "Batalla entre grupos, alianza Tierra-Aire y Agua-Fuego";
                        break;
                    case m_pelea_azar:
                        o_control.boton_txt = "Sin grupos, pero todos con la configuración básica de tiro";
                        break;
                }
                break;
            case m_bot_fuego:
                o_control.boton_txt = "Permite o bloquea al grupo de Fuego";
                break;
            case m_bot_aire:
                o_control.boton_txt = "Permite o bloquea al grupo de Aire";
                break;
            case m_bot_agua:
                o_control.boton_txt = "Permite o bloquea al grupo de Agua";
                break;
            case m_bot_tierra:
                o_control.boton_txt = "Permite o bloquea al grupo de Tierra";
                break;
            case m_bot_neutral:
                o_control.boton_txt = "Permite o bloquea al grupo de Muertos";
                break;
            case m_bot_foto:
                o_control.boton_txt = "Exporta una imagen PNG del avatar actual";
                break;
            case m_bot_azar:
                o_control.boton_txt = "Muestra un avatar al azar de la lista";
                break;
            case m_bot_time:
                o_control.boton_txt = "Cambia de avatar al azar cada cierto tiempo";
                break;
            case m_bot_next:
                o_control.boton_txt = "Muestra el próximo avatar de la lista";
                break;
            case m_bot_previous:
                o_control.boton_txt = "Muestra el anterior avatar de la lista";
                break;
            case m_bot_forms:
                o_control.boton_txt = "Abre URL con formulario para crear un avatar";
                break;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var nn = 0;
if tipo == m_bot_fight {
    if war_pelea == m_pelea_dual { // chambonada
        nn = 15;
    }
    else if war_pelea == m_pelea_cruz { // chambonada
        nn = 16;
    }
    else if war_pelea == m_pelea_azar { // chambonada
        nn = 17;
    }
    else {
        nn = war_pelea;
    }
}
var aa = 1;
switch tipo {
    case m_bot_neutral: if !o_control.war_gen[0] { aa = 0.5; } break;
    case m_bot_tierra: if !o_control.war_gen[1] { aa = 0.5; } break;
    case m_bot_agua: if !o_control.war_gen[2] { aa = 0.5; } break;
    case m_bot_aire: if !o_control.war_gen[3] { aa = 0.5; } break;
    case m_bot_fuego: if !o_control.war_gen[4] { aa = 0.5; } break;
    case m_bot_time: if o_control.reloj_menu == -1 { aa = 0.5; } break;
    case m_bot_chat: if war_dialogos == m_chat_null { aa = 0.5; } break;
}
if sobre {
    draw_sprite_ext(d_boton, tipo + nn, x, y, 1.2, 1.2, 0, c_white, aa);
}
else {
    draw_sprite_ext(d_boton, tipo + nn, x, y, 1, 1, 0, c_white, aa);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
