<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_bloque</parentName>
  <maskName>d_coli2</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;
clan = m_base_neutral;

x += random_range(-32, 32);
y += random_range(-32, 32);

reloj_crea = m_crear_s + random(m_crear_s);
primera_tanda = true;
// listota en caso de multi generador
cuatro = ds_list_create();
for (var i = 4; i &gt;= 1; i--) {
    if o_control.war_gen[i] {
        ds_list_add(cuatro, i);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// generacion
reloj_crea -= dlt;
if reloj_crea &lt;= 0 {
    reloj_crea = m_crear_s + random(m_crear_s);
    if primera_tanda {
        primera_tanda = false;
        // crear muchas unidades
        var tot = ceil(war_max * o_control.war_inicial);
        switch clan {
            case m_base_all:
                var m = ds_list_size(cuatro);
                if m == 0 {
                    break;
                }
                var t, aux, ll, di, f, xx, yy;
                repeat tot {
                    ds_list_shuffle(cuatro);
                    t = 0;
                    aux = s_all_sola();
                    while t &lt; m {
                        xx = room_width * 0.5;
                        yy = m_desfmap + (room_height - m_desfmap) * 0.5;
                        if s_crear_avatar(xx, yy, ds_list_find_value(cuatro, t)) {
                            f = 100;
                            do {
                                ll = random_range(m_ava_vision * 0.333, m_ava_vision) * 2;
                                di = random(360);
                                xx = o_control.ultimitou.x + lengthdir_x(ll, di);
                                yy = o_control.ultimitou.y + lengthdir_y(ll, di);
                                f--;
                            }
                            until f &lt; 0 or s_mi_dir(xx, yy, mundo) != -1;
                            o_control.ultimitou.x = xx;
                            o_control.ultimitou.y = yy;
                            break;
                        }
                        t++;
                    }
                }
                repeat tot {
                    aux = s_all_sola();
                    s_crear_zombi(aux.x, aux.y);
                }
                break;
            case m_base_paz:
                var m = ds_list_size(cuatro);
                if m == 0 {
                    break;
                }
                var t;
                repeat tot {
                    ds_list_shuffle(cuatro);
                    t = 0;
                    while t &lt; m {
                        if s_crear_avatar(x, y, ds_list_find_value(cuatro, t)) {
                            break;
                        }
                        t++;
                    }
                }
                break;
            case m_base_neutral:
                repeat tot {
                    s_crear_zombi(x, y);
                }
                break;
            default:
                repeat tot {
                    s_crear_avatar(x, y, clan);
                }
                break;
        }
    }
    else {
        // crear una unidad
        switch clan {
            case m_base_all:
                var m = ds_list_size(cuatro);
                if m == 0 {
                    break;
                }
                ds_list_shuffle(cuatro);
                var t = 0;
                var aux = s_all_sola();
                var ll, di, f, xx, yy;
                while t &lt; m {
                    xx = room_width * 0.5;
                    yy = m_desfmap + (room_height - m_desfmap) * 0.5;
                    if s_crear_avatar(xx, yy, ds_list_find_value(cuatro, t)) {
                        f = 100;
                        do {
                            ll = random_range(m_ava_vision * 0.333, m_ava_vision) * 2;
                            di = random(360);
                            xx = o_control.ultimitou.x + lengthdir_x(ll, di);
                            yy = o_control.ultimitou.y + lengthdir_y(ll, di);
                            f--;
                        }
                        until f &lt; 0 or s_mi_dir(xx, yy, mundo) != -1;
                        o_control.ultimitou.x = xx;
                        o_control.ultimitou.y = yy;
                        break;
                    }
                    t++;
                }
                if random(1) &lt; 0.2 {
                    aux = s_all_sola();
                    s_crear_zombi(aux.x, aux.y);
                }
                break;
            case m_base_paz:
                var m = ds_list_size(cuatro);
                if m == 0 {
                    break;
                }
                ds_list_shuffle(cuatro);
                var t = 0;
                while t &lt; m {
                    if s_crear_avatar(x, y, ds_list_find_value(cuatro, t)) {
                        break;
                    }
                    t++;
                }
                break;
            case m_base_neutral:
                s_crear_zombi(x, y);
                break;
            default:
                s_crear_avatar(x, y, clan);
                break;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(cuatro);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(d_base, clan, x, y);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
