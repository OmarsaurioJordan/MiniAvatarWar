<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>d_coli1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//inicializado desde codigo

// osci: 0-body, 1-cara, 2-tool, 3-arma, 4-name
// paso: 0-pies
s_ani_ini(id, 5, 1);
reloj_pies = 0;

// poner en lugar libre
if room == w_mundo {
    while s_mi_dir(x, y, mundo) == -1 {
        x += random_range(-6, 6);
        y += random_range(-6, 6);
    }
}

// sonidos
alarm[0] = ceil(room_speed * random_range(3, 6));
alarm[1] = -1;

// IA
reloj_errar = m_errar_s + random(m_errar_azar_s);
mover_errar = true;
esquive = random_range(-60, 60);
reloj_esquive = random(4);
direction = random(360);
estado = m_est_centro;
mx = x;
my = y;
atk = false;
reloj_est = 0;
enemy = noone;
reloj_evasion = 0;
forcejeo = 0;
reloj_forcejeo = 0;
reloj_cadencia = 0;
vida = m_ava_vida;
boomerang = true;
reloj_espada = 0;
reloj_veneno = -1;
veneno_clan = 0;
reloj_poder = random(3);
reloj_inspira = 0;
reloj_atolondra = 0;
desarmar = true;
embestir = true;
reloj_embestir = -1;
reloj_coli = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if seleccion == id {
    if o_control.war_camfind == m_cam_find_die {
        s_cam_cambio();
    }
    else if o_control.war_camfind == m_cam_find_time {
        o_control.reloj_cam = m_cam_time_s;
        s_cam_cambio();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// sonido triunfo

if tipo == m_tipo_user {
    s_audio(a_triunfoend, x, y, 5);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// animal elemental

if tipo == m_tipo_elem {
    switch clan {
        case m_base_tierra: s_audio(a_eletierra, x, y, 32); break;
        case m_base_agua: s_audio(a_eleagua, x, y, 32); break;
        case m_base_aire: s_audio(a_eleaire, x, y, 32); break;
        case m_base_fuego: s_audio(a_elefuego, x, y, 32); break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// animacion
s_ani_osci(id, 0, 3.1, 4); // body
s_ani_osci(id, 1, 2.7, 4); // cara
s_ani_osci(id, 2, 2.4, 5); // tool
s_ani_osci(id, 3, 2.2, 6); // arma
s_ani_osci(id, 4, 3.5, 2); // name
s_ani_paso(id, 0, 0.1, 5); // pies

// dejarlo como monigote
if room != w_mundo {
    exit;
}

// para limite minimo de huida, util en espadachines empujandose
if arma == 1 {
    reloj_espada = max(0, reloj_espada - dlt);
    reloj_forcejeo -= dlt;
    if reloj_forcejeo &lt;= 0 {
        reloj_forcejeo = 1 + random(3);
        forcejeo = random(16);
    }
}

// envenenamiento
if reloj_veneno != -1 {
    if war_fin {
        reloj_veneno = -1;
    }
    else {
        var arv = reloj_veneno;
        reloj_veneno -= dlt;
        if reloj_veneno &lt;= 0 {
            reloj_veneno = -1;
        }
        else if (arv &gt; m_ava_veneno_s * 0.75 and
                reloj_veneno &lt;= m_ava_veneno_s * 0.75) or
                (arv &gt; m_ava_veneno_s * 0.5 and
                reloj_veneno &lt;= m_ava_veneno_s * 0.5) or
                (arv &gt; m_ava_veneno_s * 0.25 and
                reloj_veneno &lt;= m_ava_veneno_s * 0.25) {
            s_audio(a_tos, x, y, 10);
        }
        // reducir vida
        if cara == 2 {
            vida = max(0, vida - dlt * 0.2);
        }
        else {
            vida = max(0, vida - dlt);
        }
        // esta muertico
        if vida == 0 {
            if tipo != m_tipo_elem {
                war_stats[veneno_clan, m_sta_caza]++;
            }
            // explosion final
            if tool == 4 {
                var yo = id;
                with instance_create(x, y, o_explosion) {
                    clan = yo.clan;
                }
            }
            s_morir(id);
            exit;
        }
    }
}

// preparar ataque
reloj_cadencia = max(0, reloj_cadencia - dlt);

// des inspirarse
reloj_inspira = max(0, reloj_inspira - dlt);

// des atolondrarse
reloj_atolondra = max(0, reloj_atolondra - dlt);

// recargar la embestida
if reloj_embestir != -1 {
    reloj_embestir -= dlt;
    if reloj_embestir &lt;= 0 {
        reloj_embestir = -1;
        embestir = true;
    }
}

// para cambios de viraje y esquivar
reloj_esquive -= dlt;
if reloj_esquive &lt;= 0 {
    reloj_esquive += random(4);
    esquive = random_range(-60, 60);
}

// para evitar colision un momento
reloj_coli -= dlt;
if reloj_coli &lt;= 0 {
    reloj_coli = m_ia_colision_s;
}

// colisiones
var viej_x = x;
var viej_y = y;
var otro = instance_place(x, y, o_bloque);
if otro != noone {
    var dir = point_direction(otro.x, otro.y, x, y) + esquive;
    var vel = s_para_velocidad(id) * dlt * 0.5;
    x += lengthdir_x(vel, dir);
    y += lengthdir_y(vel, dir);
}
if reloj_coli &lt; m_ia_colision_s * 0.5 {
    otro = noone;
}
else {
    otro = instance_place(x, y, o_avatar);
}
if otro != noone {
    var dir = point_direction(otro.x, otro.y, x, y);
    var vel = s_para_velocidad(id) * dlt / 2;
    x += lengthdir_x(vel, dir);
    y += lengthdir_y(vel, dir);
    var otro_vx = otro.x;
    var otro_vy = otro.y;
    otro.x += lengthdir_x(vel, -dir);
    otro.y += lengthdir_y(vel, -dir);
    if s_mi_dir(otro.x, otro.y, mundo) == -1 {
        otro.x = otro_vx;
        otro.y = otro_vy;
    }
}
else if reloj_atolondra != 0 {
    atk = false;
    // no hacer nada
}
else if seleccion == id and modo_player {
    // manejar unidad con teclado
    var ddd;
    if keyboard_check(ord('W')) or keyboard_check(vk_up) {
        if keyboard_check(ord('D')) or keyboard_check(vk_right) {
            ddd = 45;
        }
        else if keyboard_check(ord('A')) or keyboard_check(vk_left) {
            ddd = 135;
        }
        else {
            ddd = 90;
        }
    }
    else if keyboard_check(ord('S')) or keyboard_check(vk_down) {
        if keyboard_check(ord('D')) or keyboard_check(vk_right) {
            ddd = 315;
        }
        else if keyboard_check(ord('A')) or keyboard_check(vk_left) {
            ddd = 225;
        }
        else {
            ddd = 270;
        }
    }
    else {
        if keyboard_check(ord('D')) or keyboard_check(vk_right) {
            ddd = 0;
        }
        else if keyboard_check(ord('A')) or keyboard_check(vk_left) {
            ddd = 180;
        }
        else {
            ddd = -1;
        }
    }
    if ddd != -1 {
        var vel = s_para_velocidad(id) * dlt;
        x += lengthdir_x(vel, ddd);
        y += lengthdir_y(vel, ddd);
    }
    atk = true;
}
else if war_fin {
    // errar
    reloj_errar -= dlt;
    if reloj_errar &lt;= 0 {
        reloj_errar = m_errar_s + random(m_errar_azar_s);
        if mover_errar {
            mover_errar = choose(true, true, true, false);
            direction += random_range(-90, 90);
        }
        else {
            mover_errar = choose(true, false, false, false);
            direction = random(360);
        }
    }
    if mover_errar {
        var vel = s_para_velocidad(id) * dlt;
        x += lengthdir_x(vel, direction);
        y += lengthdir_y(vel, direction);
    }
    atk = false;
}
else {
    // IA
    // buscar nuevo enemigo
    if enemy == noone {
        enemy = s_busqueda(id, 1, s_para_vision(id), true);
        if enemy != noone {
            estado = m_est_seguir;
            s_avisar(id, s_para_vision(id));
        }
    }
    // reasignar enemigo cercano
    else if random(1) &lt; (1 / room_speed) * war_speed {
        var e = s_busqueda(id, 4, s_para_vision(id), true);
        if e != noone and e != enemy and instance_exists(enemy) {
            if point_distance(x, y, e.x, e.y) &lt; point_distance(x, y, enemy.x, enemy.y) {
                enemy = e;
            }
        }
    }
    // maquina de estados para movimiento y ataque
    switch estado {
        
        case m_est_errar:
            reloj_est -= dlt;
            if reloj_est &lt;= 0 {
                estado = m_est_centro;
                break;
            }
            reloj_errar -= dlt;
            if reloj_errar &lt;= 0 {
                reloj_errar = m_errar_s + random(m_errar_azar_s);
                if mover_errar {
                    mover_errar = choose(true, true, true, false);
                    direction += random_range(-90, 90);
                }
                else {
                    mover_errar = choose(true, false, false, false);
                    direction = random(360);
                }
                // procuran reagruparse a aliado
                if random(1) &lt; m_ava_reagruparse {
                    var ali = s_busqueda(id, 4, s_para_vision(id), false);
                    if ali != noone {
                        direction = point_direction(x, y, ali.x, ali.y);
                    }
                }
            }
            if mover_errar {
                var vel = s_para_velocidad(id) * dlt;
                x += lengthdir_x(vel, direction);
                y += lengthdir_y(vel, direction);
            }
            atk = false;
            break;
        
        case m_est_centro:
            var dd = s_mi_dir(x, y, camino);
            if dd == -1 or point_distance(x, y, o_cen.x, o_cen.y) &lt; 96 {
                estado = m_est_errar;
                reloj_est = m_ia_errar_poscentro_s + random(m_ia_errar_poscentro_s);
            }
            else {
                var vel = s_para_velocidad(id) * dlt;
                x += lengthdir_x(vel, dd);
                y += lengthdir_y(vel, dd);
            }
            atk = false;
            break;
        
        case m_est_rastrear:
            reloj_est -= dlt;
            if reloj_est &lt;= 0 {
                estado = m_est_errar;
                reloj_est = m_ia_errar_posbusq_s + random(m_ia_errar_posbusq_s);
                break;
            }
            if point_distance(x, y, mx, my) &gt; 16 {
                var dd = point_direction(x, y, mx, my);
                var vel = s_para_velocidad(id) * dlt;
                x += lengthdir_x(vel, dd);
                y += lengthdir_y(vel, dd);
            }
            else {
                estado = m_est_errar;
                reloj_est = m_ia_errar_posbusq_s + random(m_ia_errar_posbusq_s);
            }
            atk = false;
            break;
        
        case m_est_seguir:
            var ll;
            if instance_exists(enemy) {
                ll = point_distance(x, y, enemy.x, enemy.y);
                if ll &gt; s_para_vision(id) or collision_line(x, y, enemy.x, enemy.y,
                        o_bloque, true, false) {
                    estado = m_est_rastrear;
                    reloj_est = m_ia_rastreo_s;
                    enemy = noone;
                    break;
                }
                else {
                    mx = enemy.x;
                    my = enemy.y;
                }
            }
            else {
                estado = m_est_rastrear;
                reloj_est = m_ia_rastreo_s;
                enemy = noone;
                break;
            }
            if ll &gt; s_margen_seguir(id, true) {
                var dd = point_direction(x, y, mx, my) + esquive * 0.5;
                var vel = s_para_velocidad(id) * dlt;
                x += lengthdir_x(vel, dd);
                y += lengthdir_y(vel, dd);
                reloj_evasion = 0;
                atk = false;
            }
            else if ll &lt; s_margen_seguir(id, false) + forcejeo {
                var dd = point_direction(x, y, mx, my) + esquive;
                var vel = s_para_velocidad(id) * dlt;
                x += lengthdir_x(vel, -dd);
                y += lengthdir_y(vel, -dd);
                reloj_evasion = 0;
                atk = true;
            }
            else {
                reloj_evasion -= dlt;
                if reloj_evasion &lt;= 0 {
                    reloj_evasion = m_ia_evasion_s + random(m_ia_evasion_s);
                    // procuran reagruparse a aliado
                    if random(1) &lt; m_ava_reagruparse {
                        var ali = s_busqueda(id, 4, s_para_vision(id), false);
                        if ali != noone {
                            direction = point_direction(x, y, ali.x, ali.y);
                        }
                        else {
                            direction = random(360);
                        }
                    }
                    else {
                        direction = random(360);
                    }
                }
                var vel = s_para_velocidad(id) * dlt;
                x += lengthdir_x(vel, direction);
                y += lengthdir_y(vel, direction);
                atk = true;
            }
            break;
    }
}
// limites
if s_mi_dir(x, y, mundo) == -1 {
    direction = random(360);
    var vd = point_distance(x, y, viej_x, viej_y);
    x = viej_x + random_range(-vd, vd);
    y = viej_y + random_range(-vd, vd);
    if s_mi_dir(x, y, mundo) == -1 {
        x = viej_x;
        y = viej_y;
    }
}
x = clamp(x, 32, room_width - 32);
y = clamp(y, m_desfmap, room_height - 32);
depth = -y;
// anima pies
if x == xprevious and y == yprevious {
    reloj_pies = max(0, reloj_pies - dlt);
}
else {
    reloj_pies = 0.25;
}
// lanzar ataques
if atk {
    if seleccion == id and modo_player {
        s_atacar(id, point_direction(x, y, mouse_x, mouse_y));
    }
    else {
        var az = s_para_focoazar(arma, tipo == m_tipo_zomb);
        s_atacar(id, point_direction(x, y, mx, my) + random_range(-az, az));
    }
}
// lanzar poder especial
reloj_poder = max(0, reloj_poder - dlt);
if reloj_poder == 0 {
    reloj_poder = 1 + random(1); // para no intentar seguido
    // curar
    if tool == 2 {
        var ali, vp;
        var lis = ds_priority_create();
        repeat 4 {
            ali = s_busqueda(id, 1, s_para_vision(id) * 0.5, false);
            if ali != noone and ali != id {
                vp = ali.vida / s_para_vida(ali);
                if vp &lt; 1 {
                    ds_priority_add(lis, ali, vp);
                }
            }
        }
        if !ds_priority_empty(lis) {
            ali = ds_priority_find_min(lis);
            ali.vida = min(s_para_vida(ali), ali.vida + s_para_cura(ali));
            if ali.reloj_veneno != -1 {
                if random(1) &lt; 1 / m_ava_curacion_s or
                        (random(2) &lt; 1 / m_ava_curacion_s and
                        (ali.body == 1 or ali.body == 2)) {
                    ali.reloj_veneno = -1;
                }
            }
            reloj_poder = m_ava_curacion_s;
            s_audio(a_cura, ali.x, ali.y, 30);
        }
        ds_priority_destroy(lis);
    }
    // inspirar
    else if tool == 3 {
        s_audio(a_tambor, x, y, 20);
        var ali;
        repeat 4 {
            ali = s_busqueda(id, 1, s_para_vision(id) * 0.75, false);
            if ali != noone and ali != id {
                reloj_poder = m_ava_inspirar_s - ali.reloj_inspira;
                ali.reloj_inspira += reloj_poder;
                reloj_poder = max(1, reloj_poder);
                break;
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// vida
if war_dialogos == m_chat_null and room == w_mundo {
    draw_sprite_ext(d_avatar, 55, x, y + anima[0] + anima[1] + anima[4],
        1, 1, 0, c_oscu[clan], 0.7);
    draw_sprite_ext(d_avatar, 55, x, y + anima[0] + anima[1] + anima[4],
        vida / s_para_vida(id), 1, 0, c_blan[clan], 0.7);
}

// espadazo
if reloj_espada != 0 {
    if reloj_inspira != 0 {
        draw_sprite_ext(d_espada, 0, x, y, 1, 1, 0, c_blan[clan], 1);
    }
    draw_sprite_ext(d_espada, 0, x, y, 1, 1, 0, c_blan[clan], 1);
}

// color veneno
if reloj_veneno != -1 {
    var c_v = merge_colour(c_clan[veneno_clan], c_white, 0.25);
}

// pies
if reloj_pies == 0 {
    draw_sprite_ext(d_avatar, 1, x, y, 1, 1, 0, c_clan[clan], 1);
    draw_sprite_ext(d_avatar, 2, x, y, 1, 1, 0, c_clan[clan], 1);
    if reloj_veneno != -1 {
        draw_sprite_ext(d_veneno, 1, x, y, 1, 1, 0, c_v, 1);
        draw_sprite_ext(d_veneno, 2, x, y, 1, 1, 0, c_v, 1);
    }
}
else {
    var p1, p2;
    switch paso[0] {
        case 0: p1 = 0; p2 = 1; break;
        case 1: p1 = 0.3; p2 = 0.7; break;
        case 2: p1 = 0.7; p2 = 0.3; break;
        case 3: p1 = 1; p2 = 0; break;
        case 4: p1 = 0.7; p2 = 0.3; break;
        case 5: p1 = 0.3; p2 = 0.7; break;
    }
    draw_sprite_ext(d_avatar, 1, x, y - p1 * 12, 1, 1, 0, c_clan[clan], 1);
    draw_sprite_ext(d_avatar, 2, x, y - p2 * 12, 1, 1, 0, c_clan[clan], 1);
    if reloj_veneno != -1 {
        draw_sprite_ext(d_veneno, 1, x, y - p1 * 12, 1, 1, 0, c_v, 1);
        draw_sprite_ext(d_veneno, 2, x, y - p2 * 12, 1, 1, 0, c_v, 1);
    }
}

switch tipo {
    
    case m_tipo_user:
        // cuerpo
        draw_sprite_ext(d_avatar, 3 + body, x, y + anima[0], 1, 1, 0, c_clan[clan], 1);
        if reloj_veneno != -1 {
            draw_sprite_ext(d_veneno, 3 + body, x, y + anima[0], 1, 1, 0, c_v, 1);
        }
        draw_sprite_ext(d_avatar, 29 + body * 5 + ropa, x, y + anima[0], 1, 1, 0, c_oscu[clan], 1);
        
        // cabeza
        draw_sprite_ext(d_avatar, 0, x, y + anima[0] + anima[1], 1, 1, 0, c_clan[clan], 1);
        if reloj_veneno != -1 {
            draw_sprite_ext(d_veneno, 0, x, y + anima[0] + anima[1], 1, 1, 0, c_v, 1);
        }
        draw_sprite_ext(d_avatar, 8 + cara, x, y + anima[0] + anima[1], 1, 1, 0, c_blan[clan], 1);
        draw_sprite_ext(d_avatar, 13 + pelo, x, y + anima[0] + anima[1], 1, 1, 0, c_oscu[clan], 1);
        if reloj_atolondra != 0 {
            draw_sprite_ext(d_avatar, 56, x, y + anima[0] + anima[1], 1, 1, 0, c_blan[clan], 1);
        }
        
        // herramienta y arma
        draw_sprite_ext(d_avatar, 25 + tool, x, y + anima[0] + anima[2], 1, 1, 0, c_blan[clan], 1);
        if boomerang and reloj_espada == 0 {
            draw_sprite_ext(d_avatar, 18 + arma, x, y + anima[0] + anima[3], 1, 1, 0, c_blan[clan], 1);
        }
        
        // mensaje
        var sube = 0;
        if chat != "" and war_dialogos != m_chat_null {
            if seleccion == id or war_dialogos == m_chat_all {
                draw_sprite_ext(d_chat, 0, x, y + anima[0] + anima[1] + anima[4] - 10, 1, 1, 0, c_blan[clan], 0.8);
                draw_set_valign(fa_middle);
                draw_set_halign(fa_center);
                draw_text_ext_transformed_colour(x, y - 205 + anima[0] + anima[1] + anima[4] - 10, chat,
                    20, 230 / 0.8, 0.8, 0.8, 0, c_char[clan], c_char[clan], c_char[clan], c_char[clan], 0.8);
                sube = 130;
            }
            else {
                draw_sprite_ext(d_chat, 1, x, y + anima[0] + anima[1] + anima[4] - 10, 1, 1, 0, c_blan[clan], 0.8);
                sube = 40;
            }
        }
        
        // nombre
        draw_set_font(d_fontota);
        draw_set_valign(fa_bottom);
        draw_set_halign(fa_center);
        var alt = y - 150 + anima[0] + anima[1] + anima[4] - sube;
        var ee = 0.9;
        if seleccion == id {
            ee = 1.2;
        }
        draw_text_transformed_colour(x + 1, alt, name,
            ee, ee, 0, c_white, c_white, c_white, c_white, 1);
        draw_text_transformed_colour(x - 1, alt, name,
            ee, ee, 0, c_white, c_white, c_white, c_white, 1);
        draw_text_transformed_colour(x, alt, name,
            ee, ee, 0, c_char[clan], c_char[clan], c_char[clan], c_char[clan], 1);
        draw_set_font(d_font);
        
        break;
    
    case m_tipo_elem:
        // cuerpo
        draw_sprite_ext(d_avatar, 3 + clan, x, y + anima[0], 1, 1, 0, c_clan[clan], 1);
        if reloj_veneno != -1 {
            draw_sprite_ext(d_veneno, 3 + clan, x, y + anima[0], 1, 1, 0, c_v, 1);
        }
        
        // cabeza
        draw_sprite_ext(d_avatar, 0, x, y + anima[0] + anima[1], 1, 1, 0, c_clan[clan], 1);
        if reloj_veneno != -1 {
            draw_sprite_ext(d_veneno, 0, x, y + anima[0] + anima[1], 1, 1, 0, c_v, 1);
        }
        draw_sprite_ext(d_avatar, 29 + clan, x, y + anima[0] + anima[1], 1, 1, 0, c_oscu[clan], 1);
        if reloj_atolondra != 0 {
            draw_sprite_ext(d_avatar, 56, x, y + anima[0] + anima[1], 1, 1, 0, c_blan[clan], 1);
        }
        
        // arma
        if boomerang and reloj_espada == 0 {
            draw_sprite_ext(d_avatar, 18 + clan, x, y + anima[0] + anima[3], 1, 1, 0, c_blan[clan], 1);
        }
        
        break;
    
    case m_tipo_zomb:
        // cuerpo
        draw_sprite_ext(d_avatar, 3, x, y + anima[0], 1, 1, 0, c_clan[clan], 1);
        if reloj_veneno != -1 {
            draw_sprite_ext(d_veneno, 3, x, y + anima[0], 1, 1, 0, c_v, 1);
        }
        
        // cabeza
        draw_sprite_ext(d_avatar, 0, x, y + anima[0] + anima[1], 1, 1, 0, c_clan[clan], 1);
        if reloj_veneno != -1 {
            draw_sprite_ext(d_veneno, 0, x, y + anima[0] + anima[1], 1, 1, 0, c_v, 1);
        }
        draw_sprite_ext(d_avatar, 54, x, y + anima[0] + anima[1], 1, 1, 0, c_oscu[clan], 1);
        if reloj_atolondra != 0 {
            draw_sprite_ext(d_avatar, 56, x, y + anima[0] + anima[1], 1, 1, 0, c_blan[clan], 1);
        }
        
        // arma
        switch arma {
            case 1: if reloj_espada == 0 {
                draw_sprite_ext(d_avatar, 23, x, y + anima[0] + anima[3], 1, 1, 0, c_blan[clan], 1); } break;
            case 3: draw_sprite_ext(d_avatar, 24, x, y + anima[0] + anima[3], 1, 1, 0, c_blan[clan], 1); break;
        }
        
        break;
}

// espadazo
if reloj_espada != 0 {
    if reloj_inspira != 0 {
        draw_sprite_ext(d_espada, 1, x, y, 1, 1, 0, c_blan[clan], 1);
    }
    draw_sprite_ext(d_espada, 1, x, y, 1, 1, 0, c_blan[clan], 1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
